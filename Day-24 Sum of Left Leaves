/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if (root==null) return 0;        
        if(root.left!=null && root.left.left==null && root.left.right==null)
            return root.left.val+sumOfLeftLeaves(root.right);
        
        return sumOfLeftLeaves(root.left)+sumOfLeftLeaves(root.right);
    }
}


class Solution { 
    
  private boolean isLeaf(TreeNode node) {
    return node != null && node.left == null && node.right == null;
  }

  public int sumOfLeftLeaves(TreeNode root) {
    if (root == null) return 0;
    int total = 0;
    Deque<TreeNode> queue = new ArrayDeque<>();
    queue.push(root);

    while (!queue.isEmpty()) {
      TreeNode subRoot = queue.pop();
      if (isLeaf(subRoot.left)) {
        total += subRoot.left.val;
      }
      if (subRoot.right != null)   queue.push(subRoot.right);
      if (subRoot.left != null)    queue.push(subRoot.left);
    }
    return total;
  }
}
