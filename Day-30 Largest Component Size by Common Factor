class Solution {
    public int largestComponentSize(int[] A) {
        
        int maxVal = Integer.MIN_VALUE;
        for (int a : A) {
            maxVal = Math.max(maxVal, a);
        }
        
        UnionFind uf=new UnionFind(maxVal+1);
        for(int a:A){
            for(int i=2;i<=Math.sqrt(a);i++){
                if(a%i==0){
                    uf.union(a,i);
                    uf.union(a,a/i);
                }
            }
        }
       
        int max=1;
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int a:A){
            int parent=uf.find(a);
            map.put(parent,map.getOrDefault(parent,0)+1);
            max=Math.max(max,map.get(parent));
        }
        
        return max;
    }
    
    class UnionFind{
        
        int[] ar;
        
        UnionFind(int len){
            ar=new int[len];
            for(int i=0;i<len;i++){
                ar[i]=i;
            }
        }
        
        int find(int x){
            if(x!=ar[x]){
                ar[x]=find(ar[x]);
            }
            return ar[x];
        }
        
        void union(int x,int y){
            ar[find(x)]=ar[find(y)];
        }
    }
}
